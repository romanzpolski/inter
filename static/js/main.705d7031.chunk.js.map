{"version":3,"sources":["components/QuestionTypeOne.js","components/QuestionTypeMulti.js","App.js","serviceWorker.js","index.js"],"names":["alertDefault","visible","color","text","QuestionTypeOne","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffle","a","state","options","i","length","j","Math","floor","random","_ref","setState","onSelectClick","answer","console","log","userAnswer","alert","onAnswerBtnClick","qObj","questionObject","correctAnswers","answers","failText","fail","successText","success","resultType","str","includes","answerObj","type","acceptAnswer","onDismissAlert","q","prevProps","prevState","_this2","data","react_default","createElement","Card","className","CardHeader","id","CardBody","CardTitle","question","CardText","instructions","map","option","Row","key","Col","sm","Button","outline","onClick","Alert","isOpen","toggle","CardFooter","Component","QuestionTypeMulti","userAnswers","newAnswers","filter","maxAllowed","push","userWants","partlyText","partly","correct","forEach","round","types","1","2","3","cardColors","0","modalDefault","open","modalFadeProps","timeout","enter","exit","App","aObj","totalQuestions","questions","index","newResults","results","handleResults","res","markUp","r","addMarkup","modal","body","toggleModal","progress","ComponentName","Container","Modal","backdropTransition","size","ModalHeader","ModalBody","ModalFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gvCAGMA,EAAe,CACjBC,SAAS,EACTC,MAAO,YACPC,KAAM,IAsIKC,cAjIX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA4BVQ,QAAU,WAEN,IADA,IAAIC,EAAIR,EAAKS,MAAMC,QACVC,EAAIH,EAAEI,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADPM,EAEpB,CAACT,EAAEK,GAAIL,EAAEG,IAAvBH,EAAEG,GAFgCM,EAAA,GAE5BT,EAAEK,GAF0BI,EAAA,GAIvCjB,EAAKkB,SAAS,CACVR,QAASF,KApCER,EAwCnBmB,cAAgB,SAACC,GACbC,QAAQC,IAAI,WAAYF,GACxBpB,EAAKkB,SAAS,CACVK,WAAWH,EACXI,MAAO9B,KA5CIM,EAgDnByB,iBAAmB,WACf,IAAIC,EAAO1B,EAAKS,MAAMkB,eAElBC,EAAiBF,EAAKG,QACtBC,EAAWJ,EAAKK,KAChBC,EAAcN,EAAKO,QACnBC,EAAa,EACbC,EAAM,GAEV,GAAInC,EAAKS,MAAMc,WAAf,CASWK,EAAeQ,SAASpC,EAAKS,MAAMc,aAC1CW,EAAa,EACbC,EAAMH,EAAc,IAAMhC,EAAKS,MAAMc,aAErCW,EAAa,EACbC,EAAML,EAAW,IAAM9B,EAAKS,MAAMc,YAGtC,IAAIc,EAAY,CACZC,KAAMJ,EACNC,IAAKA,GAGTnC,EAAKD,MAAMwC,aAAaF,QArBpBrC,EAAKkB,SAAS,CACVM,MAAO,CACH7B,SAAS,EACTC,MAAO,SACPC,KAAM,gCA9DHG,EAkFnBwC,eAAiB,WACbxC,EAAKkB,SAAS,CAAEM,MAAO9B,KAjFvBM,EAAKS,MAAQ,CACTc,WAAY,GACZC,MAAO9B,EACPiC,eAAgB3B,EAAKD,MAAM0C,EAC3B/B,QAASV,EAAKD,MAAM0C,EAAE/B,SANXV,kFAuBA0C,EAAWC,GACtBxC,KAAKJ,MAAM0C,IAAMC,EAAUD,GAC3BtC,KAAKI,2CA6DJ,IAAAqC,EAAAzC,KACD0C,EAAO1C,KAAKM,MAAMkB,eAClBjB,EAAUP,KAAKM,MAAMC,QAEzB,OACIoC,EAAAtC,EAAAuC,cAACC,EAAA,EAAD,CAAMC,UAAW,mBACbH,EAAAtC,EAAAuC,cAACG,EAAA,EAAD,iBAAsBL,EAAKM,IAC3BL,EAAAtC,EAAAuC,cAACK,EAAA,EAAD,KACIN,EAAAtC,EAAAuC,cAACM,EAAA,EAAD,KACIP,EAAAtC,EAAAuC,cAAA,UAAKF,EAAKS,WAEdR,EAAAtC,EAAAuC,cAACQ,EAAA,EAAD,KAAWV,EAAKW,cACf9C,EAAQ+C,IAAI,SAAAC,GAAM,OACfZ,EAAAtC,EAAAuC,cAACY,EAAA,EAAD,CAAKC,IAAKF,GACNZ,EAAAtC,EAAAuC,cAACc,EAAA,EAAD,CAAKC,GAAI,KACJJ,EAAOZ,EAAAtC,EAAAuC,cAAA,WAAKD,EAAAtC,EAAAuC,cAAA,YAEjBD,EAAAtC,EAAAuC,cAACc,EAAA,EAAD,CAAKC,GAAI,IAAKb,UAAW,cACrBH,EAAAtC,EAAAuC,cAACgB,EAAA,EAAD,CAAQC,SAAO,EAACpE,MAAM,UACdqE,QAAS,kBAAKrB,EAAKzB,cAAcuC,IACjCT,UAAWL,EAAKnC,MAAMc,aAAemC,EAAS,SAAW,cAFjE,SAQZZ,EAAAtC,EAAAuC,cAAA,WACAD,EAAAtC,EAAAuC,cAACmB,EAAA,EAAD,CAAOtE,MAAOO,KAAKM,MAAMe,MAAM5B,MACxBuE,OAAQhE,KAAKM,MAAMe,MAAM7B,QACzByE,OAAQjE,KAAKqC,gBACfrC,KAAKM,MAAMe,MAAM3B,OAG1BiD,EAAAtC,EAAAuC,cAACsB,EAAA,EAAD,CAAYpB,UAAW,cACnBH,EAAAtC,EAAAuC,cAACgB,EAAA,EAAD,CAAQnE,MAAM,UAAUqE,QAAS,kBAAMrB,EAAKnB,qBAA5C,2DA9GgB1B,EAAOU,GACnC,OAAIV,EAAM0C,IAAMhC,EAAMkB,eACX,CACHJ,WAAY,GACZC,MAAO9B,EACPiC,eAAgB5B,EAAM0C,EACtB/B,QAASX,EAAM0C,EAAE/B,SAIlB,YAtBe4D,aCNxB5E,EAAe,CACjBC,SAAS,EACTC,MAAO,YACPC,KAAM,IAiLK0E,cA5KX,SAAAA,EAAYxE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoE,IACfvE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsE,GAAAjE,KAAAH,KAAMJ,KA+BVQ,QAAU,WAEN,IADA,IAAIC,EAAIR,EAAKS,MAAMC,QACVC,EAAIH,EAAEI,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADPM,EAEpB,CAACT,EAAEK,GAAIL,EAAEG,IAAvBH,EAAEG,GAFgCM,EAAA,GAE5BT,EAAEK,GAF0BI,EAAA,GAIvCjB,EAAKkB,SAAS,CACVR,QAASF,KAvCER,EA2CnBmB,cAAgB,SAACC,GACb,IAAIoD,EAAcxE,EAAKS,MAAM+D,YACzBC,EAAa,GAEjB,GAAGD,EAAYpC,SAAShB,GACpBqD,EAAaD,EAAYE,OAAO,SAAAnD,GAAU,OAAIA,IAAeH,IAC7DpB,EAAKkB,SAAS,CACVsD,YAAaC,SAEd,GAAGD,EAAY5D,SAAYZ,EAAKS,MAAMkE,WAAa,CACtD,IAAInD,EAAQ,CACR7B,SAAS,EACTC,MAAO,SACPC,KAAM,iDAAiDG,EAAKS,MAAMkE,YAEtE3E,EAAKkB,SAAS,CACVM,MAAOA,SAGXiD,EAAaD,GACFI,KAAKxD,GAChBpB,EAAKkB,SAAS,CACVsD,YAAaC,EACbI,WAAW,IAIhB7E,EAAKS,MAAMe,MAAM7B,SAChBK,EAAKwC,iBAETnB,QAAQC,IAAI,aAActB,EAAKS,MAAM+D,cAzEtBxE,EA4EnByB,iBAAmB,WACf,IAAIC,EAAO1B,EAAKS,MAAMkB,eAElBC,EAAiBF,EAAKG,QACtBC,EAAWJ,EAAKK,KAChBC,EAAcN,EAAKO,QACnB6C,EAAapD,EAAKqD,OAElB5C,EAAM,GACNG,EAAO,EAEX,GAJYtC,EAAKS,MAAM+D,YAAY5D,OAIxBZ,EAAKS,MAAMkE,aAAe3E,EAAKS,MAAMoE,UAAhD,CACI,IAAIrD,EAAQ,CACR7B,SAAS,EACTC,MAAO,OACPC,KAAM,kBAAmBG,EAAKS,MAAMkE,WAAa,mDAErD3E,EAAKkB,SAAS,CACVM,MAAOA,EACPqD,WAAW,QARnB,CAaA,IAAIG,EAAU,EAOd,GANAhF,EAAKS,MAAM+D,YAAYS,QAAQ,SAAA1D,GACxBK,EAAeQ,SAASb,IACvByD,MAIO,IAAZA,EACC1C,EAAO,EACPH,EAAML,OACH,GAAGkD,IAAYhF,EAAKS,MAAMkE,WAC7BrC,EAAO,EACPH,EAAMH,MACH,CAEHM,EAAO,EACPH,EAAM2C,EAAY,mBAFLhE,KAAKoE,MAAMF,EAAUhF,EAAKS,MAAMkE,WAAa,KAEX,IAGnD3E,EAAKD,MAAMwC,aAAa,CACpBD,KAAMA,EACNH,IAAKA,MAzHMnC,EA6HnBwC,eAAiB,WACbxC,EAAKkB,SAAS,CAAEM,MAAM9B,KA5HtBM,EAAKS,MAAQ,CACT+D,YAAa,GACbhD,MAAO9B,EACPiF,WAAY,EACZE,WAAW,EACXlD,eAAgB3B,EAAKD,MAAM0C,EAC3B/B,QAASV,EAAKD,MAAM0C,EAAE/B,SARXV,kFA0BA0C,EAAWC,GACtBxC,KAAKJ,MAAM0C,IAAMC,EAAUD,GAC3BtC,KAAKI,2CAqGJ,IAAAqC,EAAAzC,KACD0C,EAAO1C,KAAKM,MAAMkB,eAClBjB,EAAUP,KAAKM,MAAMC,QAEzB,OACIoC,EAAAtC,EAAAuC,cAACC,EAAA,EAAD,CAAMC,UAAW,mBACbH,EAAAtC,EAAAuC,cAACG,EAAA,EAAD,iBAAsBL,EAAKM,IAC3BL,EAAAtC,EAAAuC,cAACK,EAAA,EAAD,KACIN,EAAAtC,EAAAuC,cAACM,EAAA,EAAD,KACIP,EAAAtC,EAAAuC,cAAA,UAAKF,EAAKS,WAEdR,EAAAtC,EAAAuC,cAACQ,EAAA,EAAD,KAAWV,EAAKW,cACf9C,EAAQ+C,IAAI,SAAAC,GAAM,OACfZ,EAAAtC,EAAAuC,cAACY,EAAA,EAAD,CAAKC,IAAKF,GACNZ,EAAAtC,EAAAuC,cAACc,EAAA,EAAD,CAAKC,GAAI,KACJJ,EAAOZ,EAAAtC,EAAAuC,cAAA,WAAKD,EAAAtC,EAAAuC,cAAA,YAEjBD,EAAAtC,EAAAuC,cAACc,EAAA,EAAD,CAAKC,GAAI,IAAKb,UAAW,cACrBH,EAAAtC,EAAAuC,cAACgB,EAAA,EAAD,CAAQC,SAAO,EAACpE,MAAM,UACdqE,QAAS,kBAAKrB,EAAKzB,cAAcuC,IACjCT,UAAWL,EAAKnC,MAAM+D,YAAYpC,SAASsB,GAAU,SAAW,IAFxE,SAOZZ,EAAAtC,EAAAuC,cAAA,WACAD,EAAAtC,EAAAuC,cAACmB,EAAA,EAAD,CAAOtE,MAAOO,KAAKM,MAAMe,MAAM5B,MACxBuE,OAAQhE,KAAKM,MAAMe,MAAM7B,QACzByE,OAAQjE,KAAKqC,gBACfrC,KAAKM,MAAMe,MAAM3B,OAG1BiD,EAAAtC,EAAAuC,cAACsB,EAAA,EAAD,CAAYpB,UAAW,cACnBH,EAAAtC,EAAAuC,cAACgB,EAAA,EAAD,CAAQnE,MAAOO,KAAKM,MAAMoE,UAAY,UAAY,UAAWZ,QAAS,kBAAMrB,EAAKnB,qBAAjF,2DAtJgB1B,EAAOU,GACnC,OAAIV,EAAM0C,IAAMhC,EAAMkB,eACX,CACH6C,YAAa,GACbhD,MAAO9B,EACPiF,WAAY,EACZhD,eAAgB5B,EAAM0C,EACtB/B,QAASX,EAAM0C,EAAE/B,SAIlB,YAzBiB4D,2ECA1Ba,EAAQ,CACVC,EAAEtF,EACFuF,EAAEd,EACFe,EAAExF,GAGAyF,EAAa,CACfC,EAAE,YACFJ,EAAE,SACFC,EAAE,UACFC,EAAE,WAGAG,EAAe,CACjBC,MAAM,EACN7F,KAAM,GACNyC,KAAM,GAGJqD,EAAiB,CACnBC,QAAS,CACLC,MAAO,EACPC,KAAM,MA2GCC,cAtGX,SAAAA,EAAYhG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4F,IACf/F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8F,GAAAzF,KAAAH,KAAMJ,KAWVwC,aAAe,SAACyD,GACZ,IAAIC,EAAiBjG,EAAKkG,UAAUtF,OAAS,EACzCuF,EAAQnG,EAAKS,MAAM0F,MACnBC,EAAapG,EAAKS,MAAM4F,QAE5BD,EAAWxB,KAAKoB,GAEZG,IAAWF,EACXjG,EAAKsG,cAAcF,GAEnBpG,EAAKkB,SAAS,CACViF,MAAOA,EAAQ,EACfE,QAAQD,KAxBDpG,EA6BnBsG,cAAgB,SAACC,GACb,IAAIC,EAASD,EAAI9C,IAAI,SAACgD,EAAG9F,GAAJ,OAAUX,EAAK0G,UAAUD,EAAG9F,KACjDX,EAAKkB,SAAS,CACVyF,MAAO,CACH9G,KAAM2G,EACNd,MAAM,MAlCC1F,EAuCnB0G,UAAY,SAACH,EAAK5F,GACd,IAAI2C,EAAW4C,IAAUvF,GACzB,MACI,CACImC,EAAAtC,EAAAuC,cAACC,EAAA,EAAD,CAAMY,IAAK,OAAQgD,MAAI,EAAC5C,SAAO,EACzBpE,MAAO2F,EAAWgB,EAAIjE,MACtBW,UAAW,eACbH,EAAAtC,EAAAuC,cAACQ,EAAA,EAAD,iBAAoB5C,EAAE,GACtBmC,EAAAtC,EAAAuC,cAACM,EAAA,EAAD,KAAWP,EAAAtC,EAAAuC,cAAA,UAAKO,EAASA,WACzBR,EAAAtC,EAAAuC,cAACQ,EAAA,EAAD,KAAUT,EAAAtC,EAAAuC,cAAA,SAAIwD,EAAIpE,OAEtBW,EAAAtC,EAAAuC,cAAA,MAAIa,IAAK,YAlDF5D,EAuDnB6G,YAAc,WACV7G,EAAKkB,SAAS,CACVyF,MAAOlB,EACPU,MAAO,EACPE,QAAS,MAzDbrG,EAAKS,MAAQ,CACTqG,UAAU,EACVX,MAAO,EACPQ,MAAOlB,EACPY,QAAQ,IAGZrG,EAAKkG,UAAYA,IATFlG,wEAgEf,IAAI2B,EAAiBxB,KAAK+F,UAAU/F,KAAKM,MAAM0F,OAC3CY,EAAgB5B,EAAMxD,EAAeW,MACrCqE,EAAOxG,KAAKM,MAAMkG,MAEtB,MACI,CACI7D,EAAAtC,EAAAuC,cAACiE,EAAA,EAAD,CAAWpD,IAAK,aACZd,EAAAtC,EAAAuC,cAAA,WACAD,EAAAtC,EAAAuC,cAAA,WACAD,EAAAtC,EAAAuC,cAACY,EAAA,EAAD,KACIb,EAAAtC,EAAAuC,cAACc,EAAA,EAAD,CAAKC,GAAI,MACThB,EAAAtC,EAAAuC,cAACc,EAAA,EAAD,CAAKC,GAAI,MACLhB,EAAAtC,EAAAuC,cAACgE,EAAD,CACItE,EAAGd,EACHY,aAAcpC,KAAKoC,kBAMnCO,EAAAtC,EAAAuC,cAACkE,EAAA,EAAD,CAAOrD,IAAK,QACLsD,mBAAoBvB,EACpBwB,KAAM,KACNhD,OAAQwC,EAAMjB,KACdtB,OAAQjE,KAAK0G,aAChB/D,EAAAtC,EAAAuC,cAACqE,EAAA,EAAD,CAAahD,OAAQjE,KAAKiE,QAA1B,UACAtB,EAAAtC,EAAAuC,cAACsE,EAAA,EAAD,KACKV,EAAM9G,MAEXiD,EAAAtC,EAAAuC,cAACuE,EAAA,EAAD,KACIxE,EAAAtC,EAAAuC,cAACgB,EAAA,EAAD,CAAQC,SAAO,EAACpE,MAAM,UAAUqE,QAAS9D,KAAK0G,aAA9C,yBA/FNvC,aCvBEiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/E,EAAAtC,EAAAuC,cAAC+E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.705d7031.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Alert, Col, Row, Card, CardHeader, CardText, CardBody, CardTitle, CardFooter, Button } from 'reactstrap';\n\nconst alertDefault = {\n    visible: false,\n    color: \"secondary\",\n    text: \"\"\n}\n\nclass QuestionTypeOne extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userAnswer: \"\",\n            alert: alertDefault,\n            questionObject: this.props.q,\n            options: this.props.q.options\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.q !== state.questionObject) {\n            return {\n                userAnswer: \"\",\n                alert: alertDefault,\n                questionObject: props.q,\n                options: props.q.options\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.q !== prevProps.q) {\n            this.shuffle();\n        }\n    }\n\n    shuffle = () => {\n        let a = this.state.options;\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n        }\n        this.setState({\n            options: a\n        });\n    }\n\n    onSelectClick = (answer) => {\n        console.log(\"selected\", answer);\n        this.setState({\n            userAnswer:answer,\n            alert: alertDefault\n        })\n    }\n\n    onAnswerBtnClick = () => {\n        let qObj = this.state.questionObject;\n\n        let correctAnswers = qObj.answers,\n            failText = qObj.fail,\n            successText = qObj.success,\n            resultType = 1,\n            str = \"\";\n\n        if(!this.state.userAnswer){\n            this.setState({\n                alert: {\n                    visible: true,\n                    color: \"danger\",\n                    text: \"Please select one option.\"\n                }\n            });\n            return;\n        } else if (correctAnswers.includes(this.state.userAnswer)){\n            resultType = 3;\n            str = successText + \" \" + this.state.userAnswer;\n        } else {\n            resultType = 1;\n            str = failText + \" \" + this.state.userAnswer;\n        }\n\n        let answerObj = {\n            type: resultType,\n            str: str\n        }\n\n        this.props.acceptAnswer(answerObj);\n    }\n\n    onDismissAlert = () => {\n        this.setState({ alert: alertDefault });\n    }\n\n    render() {\n        let data = this.state.questionObject;\n        let options = this.state.options;\n\n        return (\n            <Card className={\"animated fadeIn\"}>\n                <CardHeader>Question {data.id}</CardHeader>\n                <CardBody>\n                    <CardTitle>\n                        <h3>{data.question}</h3>\n                    </CardTitle>\n                    <CardText>{data.instructions}</CardText>\n                    {options.map(option =>\n                        <Row key={option}>\n                            <Col sm={\"9\"}>\n                                {option}<br/><br/>\n                            </Col>\n                            <Col sm={\"3\"} className={\"text-right\"}>\n                                <Button outline color=\"primary\"\n                                        onClick={()=> this.onSelectClick(option)}\n                                        className={this.state.userAnswer === option ? \"active\" : \"not-active\"}>\n                                    x\n                                </Button>\n                            </Col>\n                        </Row>\n                    )}\n                    <br/>\n                    <Alert color={this.state.alert.color}\n                           isOpen={this.state.alert.visible}\n                           toggle={this.onDismissAlert}>\n                        {this.state.alert.text}\n                    </Alert>\n                </CardBody>\n                <CardFooter className={\"text-right\"}>\n                    <Button color=\"primary\" onClick={() => this.onAnswerBtnClick()}>\n                        OK\n                    </Button>\n                </CardFooter>\n            </Card>\n        );\n    }\n}\n\nexport default QuestionTypeOne;\n","import React, { Component } from 'react';\nimport { Alert, Col, Row, Card, CardHeader, CardText, CardBody, CardTitle, CardFooter, Button } from 'reactstrap';\n\nconst alertDefault = {\n    visible: false,\n    color: \"secondary\",\n    text: \"\"\n}\n\nclass QuestionTypeMulti extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userAnswers: [],\n            alert: alertDefault,\n            maxAllowed: 3,\n            userWants: false,\n            questionObject: this.props.q,\n            options: this.props.q.options\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.q !== state.questionObject) {\n            return {\n                userAnswers: [],\n                alert: alertDefault,\n                maxAllowed: 3,\n                questionObject: props.q,\n                options: props.q.options\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.q !== prevProps.q) {\n            this.shuffle();\n        }\n    }\n\n    shuffle = () => {\n        let a = this.state.options;\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n        }\n        this.setState({\n            options: a\n        });\n    }\n\n    onSelectClick = (answer) => {\n        let userAnswers = this.state.userAnswers;\n        let newAnswers = [];\n\n        if(userAnswers.includes(answer)){\n            newAnswers = userAnswers.filter(userAnswer => userAnswer !== answer);\n            this.setState({\n                userAnswers: newAnswers\n            })\n        } else if(userAnswers.length === (this.state.maxAllowed)) {\n            let alert = {\n                visible: true,\n                color: \"danger\",\n                text: \"Too many answers selected, please select only \"+this.state.maxAllowed\n            }\n            this.setState({\n                alert: alert\n            });\n        } else {\n            newAnswers = userAnswers;\n            newAnswers.push(answer);\n            this.setState({\n                userAnswers: newAnswers,\n                userWants: false\n            })\n        }\n\n        if(this.state.alert.visible){\n            this.onDismissAlert();\n        }\n        console.log(\"answers : \", this.state.userAnswers);\n    }\n\n    onAnswerBtnClick = () => {\n        let qObj = this.state.questionObject;\n\n        let correctAnswers = qObj.answers,\n            failText = qObj.fail,\n            successText = qObj.success,\n            partlyText = qObj.partly,\n            total = this.state.userAnswers.length,\n            str = \"\", // result string\n            type = 0; // result type : 1, 2, 3\n\n        if(total < this.state.maxAllowed && !this.state.userWants){\n            let alert = {\n                visible: true,\n                color: \"info\",\n                text: \"You can select \"+ this.state.maxAllowed + \" options, click OK to continue, or select more.\",\n            }\n            this.setState({\n                alert: alert,\n                userWants: true\n            });\n            return;\n        }\n\n        let correct = 0;\n        this.state.userAnswers.forEach(userAnswer => {\n            if(correctAnswers.includes(userAnswer)){\n                correct++;\n            }\n        })\n\n        if(correct === 0){\n            type = 1;\n            str = failText;\n        } else if(correct === this.state.maxAllowed) {\n            type = 3;\n            str = successText\n        } else {\n            let result = Math.round(correct / this.state.maxAllowed * 100);\n            type = 2;\n            str = partlyText+ \" Your score is: \" + result +\"%\";\n        }\n\n        this.props.acceptAnswer({\n            type: type,\n            str: str\n        });\n    }\n\n    onDismissAlert = () => {\n        this.setState({ alert:alertDefault });\n    }\n\n    render() {\n        let data = this.state.questionObject;\n        let options = this.state.options;\n\n        return (\n            <Card className={\"animated fadeIn\"}>\n                <CardHeader>Question {data.id}</CardHeader>\n                <CardBody>\n                    <CardTitle>\n                        <h3>{data.question}</h3>\n                    </CardTitle>\n                    <CardText>{data.instructions}</CardText>\n                    {options.map(option =>\n                        <Row key={option}>\n                            <Col sm={\"9\"}>\n                                {option}<br/><br/>\n                            </Col>\n                            <Col sm={\"3\"} className={\"text-right\"}>\n                                <Button outline color=\"primary\"\n                                        onClick={()=> this.onSelectClick(option)}\n                                        className={this.state.userAnswers.includes(option) ? \"active\" : \"\"}>\n                                    x</Button>\n                            </Col>\n                        </Row>\n                    )}\n                    <br/>\n                    <Alert color={this.state.alert.color}\n                           isOpen={this.state.alert.visible}\n                           toggle={this.onDismissAlert}>\n                        {this.state.alert.text}\n                    </Alert>\n                </CardBody>\n                <CardFooter className={\"text-right\"}>\n                    <Button color={this.state.userWants ? \"success\" : \"primary\"} onClick={() => this.onAnswerBtnClick()}>\n                        OK\n                    </Button>\n                </CardFooter>\n            </Card>\n\n        );\n    }\n}\n\nexport default QuestionTypeMulti;\n","import React, { Component } from 'react';\nimport QuestionTypeOne from './components/QuestionTypeOne';\nimport QuestionTypeMulti from './components/QuestionTypeMulti';\nimport {questions} from './questions.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'animate.css/animate.css';  // you need to require the css somewhere\nimport { Container, Col, Row, Modal, ModalHeader, ModalBody, ModalFooter, Button, Card, CardTitle, CardText } from 'reactstrap';\n\n\nconst types = {\n    1:QuestionTypeOne,\n    2:QuestionTypeMulti,\n    3:QuestionTypeOne\n}\n\nconst cardColors = {\n    0:\"secondary\",\n    1:\"danger\",\n    2:\"warning\",\n    3:\"success\"\n}\n\nconst modalDefault = {\n    open: false,\n    text: \"\",\n    type: 0\n}\n\nconst modalFadeProps = {\n    timeout: {\n        enter: 0,\n        exit: 150\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            progress: false,\n            index: 0,\n            modal: modalDefault,\n            results:[]\n        };\n\n        this.questions = questions;\n    }\n\n    acceptAnswer = (aObj) => {\n        let totalQuestions = this.questions.length - 1,\n            index = this.state.index,\n            newResults = this.state.results;\n\n        newResults.push(aObj);\n\n        if((index) === totalQuestions){\n            this.handleResults(newResults);\n        } else {\n            this.setState({\n                index: index + 1,\n                results:newResults\n            });\n        }\n    }\n\n    handleResults = (res) => {\n        let markUp = res.map((r, i) => this.addMarkup(r, i));\n        this.setState({\n            modal: {\n                text: markUp,\n                open: true\n            },\n        });\n    }\n\n    addMarkup = (res, i) => {\n        let question = questions[i];\n        return(\n            [\n                <Card key={\"card\"} body outline\n                      color={cardColors[res.type]}\n                      className={\"text-center\"}>\n                    <CardText>Question {i+1}</CardText>\n                    <CardTitle><h4>{question.question}</h4></CardTitle>\n                    <CardText><b>{res.str}</b></CardText>\n                </Card>,\n                <br key={\"break\"}/>\n            ]\n        )\n    }\n\n    toggleModal = () => {\n        this.setState({\n            modal: modalDefault,\n            index: 0,\n            results: []\n        });\n    }\n\n    render(){\n        let questionObject = this.questions[this.state.index];\n        let ComponentName = types[questionObject.type];\n        let modal= this.state.modal;\n\n        return (\n            [\n                <Container key={\"container\"}>\n                    <br/>\n                    <br/>\n                    <Row>\n                        <Col sm={\"1\"}></Col>\n                        <Col sm={\"10\"}>\n                            <ComponentName\n                                q={questionObject}\n                                acceptAnswer={this.acceptAnswer}>\n                            </ComponentName>\n                        </Col>\n                    </Row>\n                </Container>,\n\n                <Modal key={\"modal\"}\n                       backdropTransition={modalFadeProps}\n                       size={\"lg\"}\n                       isOpen={modal.open}\n                       toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggle}>Result</ModalHeader>\n                    <ModalBody>\n                        {modal.text}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button outline color=\"primary\" onClick={this.toggleModal}>Start Again</Button>\n                    </ModalFooter>\n                </Modal>\n            ]\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}