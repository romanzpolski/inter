{"version":3,"sources":["components/QuestionTypeOne.js","components/QuestionTypeMulti.js","App.js","serviceWorker.js","index.js"],"names":["QuestionTypeOne","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffle","a","state","options","i","length","j","Math","floor","random","_ref","setState","onSelectClick","answer","console","log","userAnswer","alertVisible","onAnswerBtnClick","qObj","questionObject","correctAnswers","answers","failText","fail","successText","success","resultType","str","includes","acceptAnswer","alertText","alertColor","onDismissAlert","q","prevProps","prevState","_this2","data","react_default","createElement","Card","className","CardHeader","id","CardBody","CardTitle","question","CardText","instructions","map","option","Row","key","Col","sm","Button","outline","color","onClick","Alert","isOpen","toggle","CardFooter","Component","QuestionTypeMulti","userAnswers","newAnswers","filter","maxAllowed","push","userWants","partlyText","partly","correct","forEach","result","round","types","1","2","3","modalColors","0","App","len","questions","newIndex","index","modalText","modal","modalType","toggleModal","ComponentName","type","modalColor","Container","Modal","backdropTransition","timeout","enter","exit","size","ModalHeader","ModalBody","body","ModalFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3368547.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Alert, Col, Row, Card, CardHeader, CardText, CardBody, CardTitle, CardFooter, Button } from 'reactstrap';\n\n\nclass QuestionTypeOne extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userAnswer: \"\",\n            alertVisible: false,\n            alertText:\"\",\n            alertColor: \"\",\n            questionObject: this.props.q,\n            options: this.props.q.options\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.q !== state.questionObject) {\n            return {\n                userAnswer: \"\",\n                alertVisible: false,\n                alertText:\"\",\n                alertColor: \"\",\n                questionObject: props.q,\n                options: props.q.options\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.q !== prevProps.q) {\n            this.shuffle();\n        }\n    }\n\n    shuffle = () => {\n        let a = this.state.options;\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n        }\n        this.setState({\n            options: a\n        });\n    }\n\n    onSelectClick = (answer) => {\n        console.log(\"selected\", answer);\n        this.setState({\n            userAnswer:answer,\n            alertVisible: false\n        })\n    }\n\n    onAnswerBtnClick = () => {\n        let qObj = this.state.questionObject;\n\n        let correctAnswers = qObj.answers,\n            failText = qObj.fail,\n            successText = qObj.success,\n            resultType = 1,\n            str = \"\";\n\n        if(!this.state.userAnswer){\n            this.setState({\n                alertVisible: true,\n                alertText:\"Please select one option.\",\n                alertColor: \"danger\"\n            });\n            return;\n        } else if (correctAnswers.includes(this.state.userAnswer)){\n            resultType = 3;\n            str = successText + \" \" + this.state.userAnswer;\n        } else {\n            resultType = 1;\n            str = failText + \" \" + this.state.userAnswer;\n        }\n\n        this.props.acceptAnswer(resultType, str);\n    }\n\n    onDismissAlert = () => {\n        this.setState({ alertVisible: false });\n    }\n\n    render() {\n        let data = this.state.questionObject;\n        let options = this.state.options;\n\n        return (\n            <Card className={\"animated fadeIn\"}>\n                <CardHeader>Question {data.id}</CardHeader>\n                <CardBody>\n                    <CardTitle>\n                        <h3>{data.question}</h3>\n                    </CardTitle>\n                    <CardText>{data.instructions}</CardText>\n                    {options.map(option =>\n                        <Row key={option}>\n                            <Col sm={\"9\"}>\n                                {option}<br/><br/>\n                            </Col>\n                            <Col sm={\"3\"} className={\"text-right\"}>\n                                <Button outline color=\"primary\"\n                                        onClick={()=> this.onSelectClick(option)}\n                                        className={this.state.userAnswer === option ? \"active\" : \"not-active\"}>\n                                    x\n                                </Button>\n                            </Col>\n                        </Row>\n                    )}\n                    <br/>\n                    <Alert color={this.state.alertColor}\n                           isOpen={this.state.alertVisible}\n                           toggle={this.onDismissAlert}>\n                        {this.state.alertText}\n                    </Alert>\n                </CardBody>\n                <CardFooter className={\"text-right\"}>\n                    <Button color=\"primary\" onClick={() => this.onAnswerBtnClick()}>\n                        OK\n                    </Button>\n                </CardFooter>\n            </Card>\n        );\n    }\n}\n\nexport default QuestionTypeOne;\n","import React, { Component } from 'react';\nimport { Alert, Col, Row, Card, CardHeader, CardText, CardBody, CardTitle, CardFooter, Button } from 'reactstrap';\n\n\nclass QuestionTypeMulti extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userAnswers: [],\n            alertVisible: false,\n            alertText:\"\",\n            alertColor: \"\",\n            maxAllowed: 3,\n            userWants: false,\n            questionObject: this.props.q,\n            options: this.props.q.options\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.q !== state.questionObject) {\n            return {\n                userAnswers: [],\n                alertVisible: false,\n                alertText:\"\",\n                alertColor: \"\",\n                questionObject: props.q,\n                options: props.q.options\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.q !== prevProps.q) {\n            this.shuffle();\n        }\n    }\n\n    shuffle = () => {\n        let a = this.state.options;\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n        }\n        this.setState({\n            options: a\n        });\n    }\n\n    onSelectClick = (answer) => {\n        let userAnswers = this.state.userAnswers;\n        let newAnswers = [];\n\n        if(userAnswers.includes(answer)){\n            newAnswers = userAnswers.filter(userAnswer => userAnswer !== answer);\n            this.setState({\n                userAnswers: newAnswers\n            })\n        } else if(userAnswers.length === (this.maxAllowed)) {\n            this.setState({\n                alertVisible: true,\n                alertText:\"Too many answers selected, please select only \"+this.state.maxAllowed,\n                alertColor: \"danger\"\n            });\n        } else {\n            newAnswers = userAnswers;\n            newAnswers.push(answer);\n            this.setState({\n                userAnswers: newAnswers,\n                userWants: false\n            })\n        }\n\n        if(this.state.alertVisible){\n            this.onDismissAlert();\n        }\n        console.log(\"answers : \", this.state.userAnswers);\n    }\n\n    onAnswerBtnClick = () => {\n        let qObj = this.state.questionObject;\n\n        let correctAnswers = qObj.answers,\n            failText = qObj.fail,\n            successText = qObj.success,\n            partlyText = qObj.partly,\n            resultType = 1,\n            total = this.state.userAnswers.length;\n\n        if(total < this.state.maxAllowed && !this.state.userWants){\n            this.setState({\n                alertVisible: true,\n                alertText:\"You can select \"+ this.maxAllowed + \" options, click OK to continue, or select more.\",\n                alertColor: \"info\",\n                userWants: true\n            });\n            return;\n        }\n\n        let correct = 0;\n        this.state.userAnswers.forEach(userAnswer => {\n            if(correctAnswers.includes(userAnswer)){\n                correct++;\n            }\n        })\n\n        if(correct === 0){\n            this.props.acceptAnswer(resultType, failText);\n        } else if(correct === this.maxAllowed) {\n            resultType = 3;\n            this.props.acceptAnswer(resultType, successText);\n        } else {\n            let result = Math.round(correct / this.state.maxAllowed * 100);\n            resultType = 2;\n            this.props.acceptAnswer(resultType, partlyText+ \" Your score is: \" + result +\"%\");\n        }\n    }\n\n    onDismissAlert = () => {\n        this.setState({ alertVisible: false });\n    }\n\n    render() {\n        let data = this.state.questionObject;\n        let options = this.state.options;\n\n        return (\n            <Card className={\"animated fadeIn\"}>\n                <CardHeader>Question {data.id}</CardHeader>\n                <CardBody>\n                    <CardTitle>\n                        <h3>{data.question}</h3>\n                    </CardTitle>\n                    <CardText>{data.instructions}</CardText>\n                    {options.map(option =>\n                        <Row key={option}>\n                            <Col sm={\"9\"}>\n                                {option}<br/><br/>\n                            </Col>\n                            <Col sm={\"3\"} className={\"text-right\"}>\n                                <Button outline color=\"primary\"\n                                        onClick={()=> this.onSelectClick(option)}\n                                        className={this.state.userAnswers.includes(option) ? \"active\" : \"\"}>\n                                    x</Button>\n                            </Col>\n                        </Row>\n                    )}\n                    <br/>\n                    <Alert color={this.state.alertColor}\n                           isOpen={this.state.alertVisible}\n                           toggle={this.onDismissAlert}>\n                        {this.state.alertText}\n                    </Alert>\n                </CardBody>\n                <CardFooter className={\"text-right\"}>\n                    <Button color={this.state.userWants ? \"success\" : \"primary\"} onClick={() => this.onAnswerBtnClick()}>\n                        OK\n                    </Button>\n                </CardFooter>\n            </Card>\n\n        );\n    }\n}\n\nexport default QuestionTypeMulti;\n","import React, { Component } from 'react';\nimport QuestionTypeOne from './components/QuestionTypeOne';\nimport QuestionTypeMulti from './components/QuestionTypeMulti';\nimport {questions} from './questions.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'animate.css/animate.css';  // you need to require the css somewhere\nimport { Container, Col, Row, Modal, ModalHeader, ModalBody, ModalFooter, Button, Card, CardTitle, CardText } from 'reactstrap';\n\n\nconst types = {\n    1:QuestionTypeOne,\n    2:QuestionTypeMulti,\n    3:QuestionTypeOne\n}\n\nconst modalColors = {\n    0:\"secondary\",\n    1:\"danger\",\n    2:\"warning\",\n    3:\"success\"\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            index: 0,\n            modal: false,\n            modalText: \"\",\n            modalType: 0\n        };\n\n        this.questions = questions;\n    }\n\n    acceptAnswer = (resultType, str) => {\n        let len = this.questions.length - 1;\n        let newIndex = this.state.index === len ? 0 : this.state.index + 1;\n        this.setState({\n            modalText: str,\n            index: newIndex,\n            modal: true,\n            modalType: resultType\n        });\n        console.log(\"new index\", newIndex);\n    }\n\n    toggleModal = () => {\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n    }\n\n    render(){\n\n        let questionObject = this.questions[this.state.index];\n        let ComponentName = types[questionObject.type];\n        let modalColor = modalColors[this.state.modalType];\n\n        let fadeProps = {\n            timeout: {\n                enter: 0,\n                exit: 150\n            }\n        }\n\n        return (\n            <Container>\n                <br/>\n                <br/>\n                <Row>\n                    <Col sm={\"1\"}></Col>\n                    <Col sm={\"10\"}>\n                        <ComponentName\n                            q={questionObject}\n                            acceptAnswer={this.acceptAnswer}>\n                        </ComponentName>\n                    </Col>\n                </Row>\n                <Modal backdropTransition={fadeProps} size={\"lg\"} isOpen={this.state.modal} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggle}>Result</ModalHeader>\n                    <ModalBody>\n                        <Card body outline color={modalColor} className={\"text-center\"}>\n                            <br/>\n                            <br/>\n                            <CardTitle>{this.state.modalText}</CardTitle>\n                            <br/>\n                            <br/>\n                        </Card>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button outline color=\"primary\" onClick={this.toggleModal}>Next Question</Button>\n                    </ModalFooter>\n                </Modal>\n            </Container>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}